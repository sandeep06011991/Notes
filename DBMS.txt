SQL
1)Declaritve vs Imperative
Declarative-Tell what to do but not how (eg.. SQL)
Imperative-Give step by step instructions
2)Outer Query variables can be used in Inner Query 
3)For every row of outer query inner Query is re-executed .
4)Difference between Having and Where
Where clause is applied on Rows before grouping for filtering .
Having is applied on groups already formed
5)Insert into (Select Query )-- Bulk insert subquery
6)Left outer join : include dangling tuples of left table
7)Outer Join is not commutative

Relation Design :
0)Normalization is systematic approach of decomposing table to remove redunduncy
1)Mega relations are decomposed based on properties
2)Properties are Functional dependencies which result in Boyce-Codd Normal Form and Multi-Valued Dependencies which result in 4NF .
3)1NF - Each Value in Column mush have only 1 object which cannot be further divided .
4)2NF - No Column should have partial dependency on primary key , it should have complete
5)3NF- Every non primary key column should depend on primary key and not on other non primary key column 
6)Functional Dependencies .
ex. sId,sName,sCollege since sid->sName(uniquely determines name sId should be key occur in only one tuple .Thus split.)
This would result Boyce Codd Normal Form 
7)Multi-valued dependecies.
ex. sId,cName,sHS if for give sId CName and sHS are not related . All possible (m*n) combinations of them would be in the tuple .
Split would result in m+n .Results in 4NF

Functional Dependencies :
1) a ---> B for t,u tuples of R 
if t.(a1,...)=u.(a1....) implies t.(b1...)=u.(b1....)
2)if a ---> All Attribute then a is key 
3) a --> a trivial depedencies
4) A --> B then A --> B1 B1 subset of B
5) A-->B1 and A-->B2 then A-->B1B2
6) Union A --> A U B 
7) Closure 
	A -> A`+ Set of all attributes which have functional dependencies with A.
Start with A as starting set .
For each element of A add all dependecies .Till none is left .
if A`+ is all attributes of the set then A is Key .

BCNF :
1) After Decomposition Relation should result in lossless join 
A=B U C and S1 |X| S2 =S whr (A,B,C are columns and S1,S2 are decomposed sets )
2) if a functional dependency exists A->B ; then A is Key or Super Key or No duplicates .
3) Creating BCNF
	Pick any dependecy not satisfying BCNF and A->B and Split
relation into R(A,B) and R(A,Others).

4NF :
1) (a,b,c) if A->> B if(a,b1,c1)and (a,b2,c2) then (a,b1,c2) exists .
This is multivalued dependecy .
Decompose such that A is Key .

UML Associations: 
1) Muultiplicity of Associations 
C1   Association (A) C2
C1	A	(m.n)C2
Each object of C1 is related to m and atmost n objects of C2.
* - wild card for any no.
2)Information of association is stored in class .
3)This can be eliminated for 0..1 or 1..1 multiplicity. 
4)Folding Association table done on 0..1 or 1..1 .

Indexes :
1) Indexes used to speed up Queries .
2) B Trees and B + Trees.
3) Query vs Update Load decides Index usage 


1)Referential integrity is directional .
2)on delete , if referenced tuple is delete, then child 
tuples are also deleted .

Last Running lecture :




























	
